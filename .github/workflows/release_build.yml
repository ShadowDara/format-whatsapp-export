# Automatic Workflow to create Releases automaticly

name: Build & Release on Tag

# Trigger nur bei Tag-Pushes
on:
  push:
    tags:
      - '*'   # z.B. v1.0.0

permissions:
  contents: write   # nötig, um Release zu erstellen / Assets zu uploaden

jobs:
  build:
    name: Build binaries
    runs-on: ubuntu-latest

    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
      fail-fast: false

    outputs:
      # damit der release-job weiß, dass Builds fertig sind
      built: ${{ steps.set-output.outputs.built }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Get version (tag)
        id: tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build
        id: build
        run: |
          set -e
          mkdir -p dist
          # <-- passe an deinen Programmnamen an
          BINNAME="format-whatsapp-export"
          TAG="${{ steps.tag.outputs.TAG }}"
          BUILDTIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)

          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUT="${BINNAME}-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
          else
            OUT="${BINNAME}-${{ matrix.goos }}-${{ matrix.goarch }}"
          fi

          echo "Building ${OUT} (GOOS=${{ matrix.goos }}, GOARCH=${{ matrix.goarch }})"
          ldflags="-X 'main.version=${TAG}' -X 'main.buildTime=${BUILDTIME}'"

          # CGO disabled for cross-compiles
          env CGO_ENABLED=0 GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -ldflags="$ldflags" -o "dist/${OUT}" ./...

          # Archive: zip on windows, tar.gz otherwise
          cd dist
          if [[ "${{ matrix.goos }}" == "windows" ]]; then
            zip -r "${OUT}.zip" "${OUT}"
            ls -lh "${OUT}.zip"
          else
            tar -czf "${OUT}.tar.gz" "${OUT}"
            ls -lh "${OUT}.tar.gz"
          fi
          cd ..

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: "${{ matrix.goos }}-${{ matrix.goarch }}"
          path: |
            dist/*${{ matrix.goos }}-${{ matrix.goarch }}*
      - name: Mark builds finished
        id: set-output
        run: echo "built=true" >> $GITHUB_OUTPUT

  release:
    name: Create GitHub Release & Attach Binaries
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Show downloaded files
        run: |
          echo "Files in release-assets:"
          find release-assets -type f -maxdepth 2 -print

      # Create release and upload all files in release-assets
      # ncipollo/release-action erstellt Release und lädt mehrere Dateien (Globs) als Assets hoch
      - name: Create Release and upload assets
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body: |
            Release created by CI for tag ${{ github.ref_name }}.
          files: release-assets/**/*

      - name: Cleanup dist folder
        run: rm -rf dist || true
